{
  "swagger": "2.0",
  "info": {
    "description": "This is the API service for goal service",
    "version": "1.0.0",
    "title": "API Goal",
    "contact": {
      "email": "Rick_Li_2@amp.com.au"
    }
  },
  "basePath": "/customer/gds_r6",
  "tags": [
    {
      "name": "Application",
      "description": "Application goals, objectives reference"
    },
    {
      "name": "Code",
      "description": "All reference code"
    },
    {
      "name": "Goal",
      "description": "Goal services"
    },
    {
      "name": "Phase",
      "description": "Phase service"
    },
    {
      "name": "Party",
      "description": "Party service"
    },
    {
      "name": "Party-Phase",
      "description": "Party Phase service"
    },
    {
      "name": "Party-Phase-Goal",
      "description": "Party Phase Goal service"
    },
    {
      "name": "Party-Goal-Objective",
      "description": "Party Goal Objective service"
    },
    {
      "name": "Objective",
      "description": "Objective service"
    },
    {
      "name": "Response",
      "description": "Response service"
    },
    {
      "name": "Scenario",
      "description": "Scenario service"
    },
    {
      "name": "Objective-Scenario",
      "description": "Objective Scenario Service"
    },
    {
      "name": "Profile",
      "description": "Profile service(R6)"
    },
    {
      "name": "Projection",
      "description": "Projection service(R6)"
    },
    {
      "name": "Assumption",
      "description": "Assumption service(R6)"
    },
    {
      "name": "Action",
      "description": "Action service(R6)"
    },
    {
      "name": "Event",
      "description": "Event service(R6)"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/goal": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get all goals",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Custom_Name",
            "in": "query",
            "description": "Search for custom name",
            "type": "string"
          },
          {
            "name": "Joint_Goal_Indicator",
            "in": "query",
            "description": "Whether this goal is a joint goal",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          {
            "name": "Seen_By_Planner_Indicator",
            "in": "query",
            "description": "Whether this goal is a joint goal",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          {
            "name": "Is_Deleted",
            "in": "query",
            "description": "Where the goal is marked as deleted",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the goal is marked as active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Goal"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a goal",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the goal to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Goal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/goal/{id}": {
      "get": {
        "tags": [
          "Goal"
        ],
        "summary": "Get goal by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of goal to fetch"
          }
        ]
      },
      "put": {
        "tags": [
          "Goal"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a goal",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of goal to update"
          },
          {
            "name": "body",
            "description": "Fields in the goal to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalInstance"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Goal"
        ],
        "summary": "Delete goal by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of goal to delete"
          }
        ]
      }
    },
    "/goal/{id}/objective": {
      "get": {
        "tags": [
          "Objective"
        ],
        "summary": "Get all objectives by Goal Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of goal"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      }
    },
    "/goal/{id}/status": {
      "patch": {
        "tags": [
          "Goal"
        ],
        "summary": "Update goal status",
        "description": "If Is_Active set to 'N', it will cascade to Party_Phase_Goal for all goals with the same ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of goal to update"
          },
          {
            "name": "body",
            "description": "Set Is_Active field",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Is_Active": {
                  "type": "string",
                  "example": "N"
                }
              }
            }
          }
        ]
      }
    },
    "/phase": {
      "get": {
        "tags": [
          "Phase"
        ],
        "summary": "Get all phases",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Phase_Id",
            "in": "query",
            "description": "Search phase by id",
            "type": "integer"
          },
          {
            "name": "External_Reference_Id",
            "in": "query",
            "description": "Search phase by external reference id",
            "type": "string"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the phase is active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Phase_Locked_Indicator",
            "in": "query",
            "description": "Whether the phase is locked",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Phase"
        ],
        "summary": "Create a phase",
        "description": "When create a phase with a provided Phase_Id, it will do a snapshot of the provided phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the phase to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Phase"
            }
          }
        ]
      }
    },
    "/phase{id}": {
      "get": {
        "tags": [
          "Phase"
        ],
        "summary": "Get phase by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Phase"
        ],
        "summary": "Update phase by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Phase"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Phase"
        ],
        "summary": "Delete phase by id",
        "description": "Set Is_Deleted to Y",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/phase{id}/status": {
      "patch": {
        "tags": [
          "Phase"
        ],
        "summary": "Update phase status",
        "description": "If Is_Active set to 'N', it will cascade to tables relate to this phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of phase to update"
          },
          {
            "name": "body",
            "description": "Set Is_Active field",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Is_Active": {
                  "type": "string",
                  "example": "N"
                }
              }
            }
          }
        ]
      }
    },
    "/party": {
      "get": {
        "tags": [
          "Party"
        ],
        "summary": "Get all parties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Party_Id",
            "in": "query",
            "description": "Search party by id",
            "type": "integer"
          },
          {
            "name": "Scv_Indicator",
            "in": "query",
            "description": "whether this party has a record in CMDM",
            "type": "integer"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the phase is active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Party"
        ],
        "summary": "Create a party",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the party to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Party"
            }
          }
        ]
      }
    },
    "/party/{id}": {
      "get": {
        "tags": [
          "Party"
        ],
        "summary": "Get party by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Party"
        ],
        "summary": "Update party by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Party"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Party"
        ],
        "summary": "Delete party by id",
        "description": "Set Is_Deleted to Y",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/party/{id}/status": {
      "patch": {
        "tags": [
          "Party"
        ],
        "summary": "Update party status",
        "description": "If Is_Active set to 'N', it will cascade to tables relate to this party",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of phase to update"
          },
          {
            "name": "body",
            "description": "Set Is_Active field",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Is_Active": {
                  "type": "string",
                  "example": "N"
                }
              }
            }
          }
        ]
      }
    },
    "/party-phase": {
      "get": {
        "tags": [
          "Party-Phase"
        ],
        "summary": "Get all parties within a phase / all phases under a party",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Party_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Phase_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the party phase relationship is active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Party-Phase"
        ],
        "summary": "Add party to phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Party_Id": {
                  "type": "integer"
                },
                "Phase_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Party-Phase"
        ],
        "summary": "Update party to phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Party_Id": {
                  "type": "integer"
                },
                "Phase_Id": {
                  "type": "integer"
                },
                "Is_Active": {
                  "type": "string",
                  "enum": [
                    "Y",
                    "N"
                  ],
                  "default": "N"
                }
              }
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Party-Phase"
        ],
        "summary": "Remove a party from phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Party_Id": {
                  "type": "integer"
                },
                "Phase_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "/party-phase-goal/objectives": {
      "get": {
        "tags": [
          "Party-Phase-Goal"
        ],
        "summary": "Get objectives count for each goal with External_Reference_Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "External_Reference_Id",
            "in": "query",
            "type": "string"
          }
        ]
      }
    },
    "/party-phase-goal": {
      "get": {
        "tags": [
          "Party-Phase-Goal"
        ],
        "summary": "Get goals for for party / phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Party_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Phase_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Goal_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the party phase goal relationship is active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Party-Phase-Goal"
        ],
        "summary": "Add goal to a party and phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Party-Phase-Goal"
        ],
        "summary": "Update goal for a party and phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                },
                "Is_Active": {
                  "type": "string",
                  "enum": [
                    "Y",
                    "N"
                  ],
                  "default": "Y"
                }
              }
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Party-Phase-Goal"
        ],
        "summary": "Delete goal from a party and phase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "/party-goal-objective": {
      "get": {
        "tags": [
          "Party-Goal-Objective"
        ],
        "summary": "Get objectives for for party / goal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Party_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Phase_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Goal_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Objective_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Is_Active",
            "in": "query",
            "description": "Where the party phase goal relationship is active",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "Y"
          },
          {
            "name": "Order_Effective_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Party-Goal-Objective"
        ],
        "summary": "Add objective to a party and goal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                },
                "Objective_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Party-Goal-Objective"
        ],
        "summary": "Update objective for a party and goal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                },
                "Objective_Id": {
                  "type": "integer"
                },
                "Is_Active": {
                  "type": "string",
                  "enum": [
                    "Y",
                    "N"
                  ],
                  "default": "Y"
                }
              }
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Party-Goal-Objective"
        ],
        "summary": "Delete objective from a party and goal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Phase_Id": {
                  "type": "integer"
                },
                "Goal_Id": {
                  "type": "integer"
                },
                "Party_Id": {
                  "type": "integer"
                },
                "Objective_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "/objective/{id}": {
      "get": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get objective by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "delete": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete objective by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update objective by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Objective_Code_Id": {
                  "type": "string",
                  "example": "C1_Educ_OBJ_Save"
                },
                "Timeframe_Code_Id": {
                  "type": "string",
                  "example": "Later"
                },
                "Priority_Code_Id": {
                  "type": "string",
                  "example": "High"
                },
                "Status_Code_Id": {
                  "type": "string",
                  "example": "Parked"
                },
                "Party_Id": {
                  "type": "object",
                  "example": [
                    1,
                    2
                  ]
                },
                "Response": {
                  "type": "object",
                  "example": [
                    {
                      "Question_Code_Id": "OQ_PaymentStartDate",
                      "Scenario_Id": "1",
                      "Objective_Id": "1",
                      "Value": "2016"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update objective by id and captures a note",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Notes": {
                  "type": "string",
                  "example": "Note example text"
                },
                "Is_Active": {
                  "type": "string",
                  "example": "Note example text"
                },
                "Response": {
                  "type": "object"
                }
              }
            }
          }
        ]
      }
    },
    "/objective": {
      "post": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a objective",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the objective to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Objective"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Objective"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get objectives",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "priority",
            "description": "Objective priority code",
            "in": "query",
            "type": "string"
          },
          {
            "name": "scenarioId",
            "description": "ScenarioId which objective sits under",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/response/{id}": {
      "delete": {
        "tags": [
          "Response"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get response by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Response"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update response by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Value": {
                  "type": "string",
                  "example": "Answer"
                }
              }
            }
          }
        ]
      }
    },
    "/response": {
      "get": {
        "tags": [
          "Response"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get response",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Response_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Question_Id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "Scenario_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Objective_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Value",
            "in": "query",
            "type": "string"
          },
          {
            "name": "Is_Deleted",
            "in": "query",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          {
            "name": "Order_Updated_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "put": {
        "tags": [
          "Response"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a response",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the response to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Objective_Id": {
                  "type": "integer",
                  "example": 1
                },
                "Question_Id": {
                  "type": "string",
                  "example": "OQ_LumpSumBudget"
                },
                "Value": {
                  "type": "string",
                  "example": "Answer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Response"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a response",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the response to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scenario": {
      "get": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Phase_Id",
            "in": "query",
            "type": "integer",
            "required": true
          },
          {
            "name": "Scenario_Id",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "Order_Updated_Date",
            "in": "query",
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "DESC"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "example": 30,
            "description": "Default limit is 30 if not specified"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 0,
            "description": "Default offset is 0 if not specified"
          }
        ]
      },
      "post": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the scenario to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Scenario"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scenario/favourite": {
      "post": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Favourite a scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the create favourite scenario",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Scenario_Id": {
                  "type": "integer"
                },
                "Phase_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/scenario/{id}": {
      "get": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get scenario by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "delete": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete scenario by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update scenario by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "example": "Starting Position"
                },
                "Type": {
                  "type": "string",
                  "example": "initial"
                }
              }
            }
          }
        ]
      }
    },
    "/scenario/{id}/assumption": {
      "patch": {
        "tags": [
          "Assumption"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update Assumptions",
        "description": "Update the assumptions for a scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "description": "The ID of the scenario which the assumtions belong to",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "inflationAdjust",
            "description": "If true the results are shown in nominal future dollar amounts, otherwise all results are shown in today’s dollars, discounted at the simulated rates of future wage inflation",
            "in": "formData",
            "type": "boolean",
            "x-category": "Projection Settings",
            "x-joint": true
          },
          {
            "name": "capitalExhaustionMale",
            "description": "Age of capital exhaustion for male",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "x-validation": "if( value <= 100 ) throw 'au.com.amp.advice.error.validation.over.maximum';\nif( value <= 1 ) throw 'au.com.amp.advice.error.validation.under.minimum';\n",
              "x-unit": "age"
            },
            "maxItems": 2,
            "x-category": "About me",
            "x-joint": false
          },
          {
            "name": "capitalExhaustionFemale",
            "description": "Age of capital exhaustion for female",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "x-validation": "if( value <= 100 ) throw 'au.com.amp.advice.error.validation.over.maximum';\nif( value <= 1 ) throw 'au.com.amp.advice.error.validation.under.minimum';\n",
              "x-unit": "age"
            },
            "maxItems": 2,
            "x-category": "About me",
            "x-joint": false,
            "maximum": 100,
            "minimum": 0
          },
          {
            "name": "retirementAge",
            "description": "When employment income stops",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "x-unit": "age",
              "x-validation": "if( value <= 100 ) throw 'au.com.amp.advice.error.validation.over.maximum';\nif( value <= 1 ) throw 'au.com.amp.advice.error.validation.under.minimum';\n"
            },
            "maxItems": 2,
            "x-category": "About me",
            "x-joint": false
          },
          {
            "name": "assetAllocationGrowthPercentSuper",
            "description": "Weight of asset allocation within super fund",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "0% Growth",
                "30% Growth",
                "50% Growth",
                "70% Growth",
                "85% Growth",
                "100% Growth"
              ]
            },
            "maxItems": 2,
            "x-category": "Super & Pension",
            "x-joint": false
          },
          {
            "name": "assetAllocationGrowthPercentPension",
            "description": "Weight of asset allocation within pension fund",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "0% Growth",
                "30% Growth",
                "50% Growth",
                "70% Growth",
                "85% Growth",
                "100% Growth"
              ]
            },
            "maxItems": 2,
            "x-category": "Super & Pension",
            "x-joint": false
          },
          {
            "name": "goalPropertyPurchaseInitialExpensesPercent",
            "description": "Stamp duty and other 1 off expenses",
            "in": "formData",
            "type": "number",
            "x-unit": "percent",
            "x-validation": "if( value <= 100 ) throw 'au.com.amp.advice.error.validation.over.maximum';\nif( value <= 0 ) throw 'au.com.amp.advice.error.validation.under.minimum';\n",
            "maximum": 100,
            "minimum": 0,
            "x-category": "Property",
            "x-joint": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          }
        }
      }
    },
    "/objective-scenario": {
      "get": {
        "tags": [
          "Objective-Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get objectives by scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Scenario_Id",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Objective_Id",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "delete": {
        "tags": [
          "Objective-Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete scenario by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields to be deleted",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Objective_Id": {
                  "type": "integer"
                },
                "Scenario_Id": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Objective-Scenario"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update scenario by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Objective_Id": {
                  "type": "integer",
                  "required": true
                },
                "Scenario_Id": {
                  "type": "integer",
                  "required": true
                },
                "Projection_Probability": {
                  "type": "string",
                  "example": "1"
                },
                "Priority_Code": {
                  "type": "string",
                  "example": "High"
                },
                "Status_Code": {
                  "type": "string",
                  "example": "Active"
                },
                "Timeframe_Code": {
                  "type": "string",
                  "example": "Later"
                }
              }
            }
          }
        ]
      }
    },
    "/projection": {
      "get": {
        "tags": [
          "Projection"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get projection by scenario",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "Scenario_Id",
            "description": "Get projection by scenario id",
            "in": "query"
          },
          {
            "name": "Objective_Id",
            "description": "Get projection by objetive id",
            "in": "query"
          },
          {
            "name": "Request_Id",
            "description": "Get projection by request id",
            "in": "query"
          },
          {
            "name": "Status",
            "description": "Status of the projection",
            "in": "query"
          }
        ]
      },
      "post": {
        "tags": [
          "Projection"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a projection",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the projection to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Projection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projection/{id}": {
      "get": {
        "tags": [
          "Projection"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get projection by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "delete": {
        "tags": [
          "Projection"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete projection by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ]
      },
      "put": {
        "tags": [
          "Projection"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update projection by id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Type": {
                  "type": "string",
                  "example": ""
                },
                "Status": {
                  "type": "string",
                  "example": ""
                },
                "Input_Xml": {
                  "type": "string",
                  "example": ""
                },
                "Output_Xml": {
                  "type": "string",
                  "example": ""
                }
              }
            }
          }
        ]
      }
    },
    "/profile/balance": {
      "get": {
        "tags": [
          "Profile"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get profile by scenario id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "scenarioId",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Party_Id",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "joint",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "enum": [
              "level_1",
              "level_2",
              "level_3",
              "level_4"
            ],
            "default": "level_2"
          }
        ]
      }
    },
    "/profile/customer": {
      "get": {
        "tags": [
          "Profile"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get profile by scenario id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "scenarioId",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/assumption": {
      "get": {
        "tags": [
          "Assumption"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get assumption by scenario id",
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "scenarioId",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/action": {
      "post": {
        "tags": [
          "Action"
        ],
        "summary": "Create action",
        "description": "Create action",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the action to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Actions Definitions",
        "description": "Retrieves the complete list of action definitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "scenarioId",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "list of action definitions (AKA Strategies)",
            "schema": {
              "$ref": "#/definitions/ActionDefinitionsList"
            }
          }
        }
      }
    },
    "/action/{id}": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Get action by id",
        "description": "Get action by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of action to fetch"
          }
        ]
      },
      "put": {
        "tags": [
          "Action"
        ],
        "summary": "Update action",
        "description": "Update action",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Action Id",
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields for the action to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Action"
        ],
        "summary": "Delete action",
        "description": "Delete action",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Action Id",
            "type": "integer"
          }
        ]
      },
      "patch": {
        "tags": [
          "Action"
        ],
        "summary": "Update action status",
        "description": "Set an action as PARKED or ACTIVE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Action_Id"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "PARKED or ACTIVE"
          }
        ]
      }
    },
    "/event": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create event",
        "description": "Create event",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "body",
            "description": "Fields for the event to be inserted",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Event Definitions",
        "description": "Retrieves the complete list of event definitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "scenarioId",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "list of event definitions"
          }
        }
      }
    },
    "/event/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get event by id",
        "description": "Get event by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of event to fetch"
          }
        ]
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Update event",
        "description": "Update event",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Event Id",
            "type": "integer"
          },
          {
            "name": "body",
            "description": "Fields for the event to be updated",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Delete event",
        "description": "Delete event",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "required": false,
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "required": false,
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Event Id",
            "type": "integer"
          }
        ]
      },
      "patch": {
        "tags": [
          "Event"
        ],
        "summary": "Update event status",
        "description": "Set an event as PARKED or ACTIVE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "Correlation ID",
            "type": "string",
            "default": "goals-test-swagger"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Auth token",
            "type": "string",
            "default": "Basic YWRwOmFkbWlucGFzcw=="
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "Event_Id"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "PARKED or ACTIVE"
          }
        ]
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "example": "Accident"
        },
        "Description": {
          "type": "string",
          "example": "Car accident"
        },
        "Value": {
          "type": "string",
          "example": "Active"
        },
        "Notes": {
          "type": "string",
          "example": "What happened"
        },
        "Action_Code_Id": {
          "type": "string",
          "example": "MM_CntrLnk_AgePen"
        },
        "Action_Parameters": {
          "type": "object",
          "example": [
            {
              "Value": "1000",
              "Question_Code_Id": "Pension_Ann_Fund"
            }
          ]
        },
        "Action_Adjustments": {
          "type": "object",
          "example": [
            {
              "Value": "1000",
              "Question_Code_Id": "Pension_Ann_Fund"
            }
          ]
        },
        "Party_Ids": {
          "type": "object",
          "example": [
            1,
            2
          ]
        }
      }
    },
    "ActionDefinition": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the Action.\n\nSource - RDS.Action_Area_Code.Action_Area_Code_Id || RDS.Action_Group_Code.Action_Group_Code_Id || RDS.Action_Code.Action_Code_Id\n"
        },
        "name": {
          "type": "string",
          "description": "The Name of the Action. Source - RDS.Action_Area_Code.Name || RDS.Action_Group_Code.Name || RDS.Action_Code.Name\n",
          "maxLength": 300
        },
        "type": {
          "type": "string",
          "description": "They type of action definition this is Source - `AdviceArea` if it's in RDS.Action_Area_Code, `StrategyGroup` if it's in RDS.Action_Group_Code, `Strategy` if it's in RDS.Action_Code\n",
          "enum": [
            "AdviceArea",
            "StrategyGroup",
            "Strategy"
          ]
        },
        "fields": {
          "type": "array",
          "description": "The settable fields when creating an action instance.\nSource - RDS.Action_Attributes\n",
          "items": {
            "type": "object",
            "description": "TBC",
            "properties": {}
          },
          "maxItems": 300
        },
        "millimanModelable": {
          "type": "boolean",
          "description": "Can milliman model this action?\nSource - RDS.Action_Code.Milliman_Indicator\n"
        },
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/Link"
            },
            "items": {
              "type": "array",
              "description": "The links to the action definitions that belong to this `AdviceArea` or `StrategyGroup`. Source - RDS.Action_Group_Code.Action_Area_Code_Id || RDS.Action_Code.Action_Group_Code_Id\n",
              "items": {
                "$ref": "#/definitions/Link"
              }
            },
            "up": {
              "type": "object",
              "description": "A link to the `AdviceArea` or `StrategyGroup` that this action definition belongs to Source - RDS.Action_Group_Code.Action_Area_Code_Id || RDS.Action_Code.Action_Group_Code_Id || null if in Action_Area_Code\n",
              "properties": {
                "href": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      },
      "description": "A definition for an action.\nActions are available in the following hierarchy:\n  - Advice Areas\n  - Strategy Grouping\n  - Strategy\n  \nThe `type` field represents an action's position in that hierarchy.\n\n- Advice Area Action defintions will not have an `up` link.\n- Implemntable actions definitions will not have an `items` link\n\nOther fields TBC\n"
    },
    "ActionDefinitionsList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "The complete list of action definitions.\n\nSource - A union of RDS.Action_Area_Code, RDS.Action_Group_Code and RDS.Action_Code\n",
          "items": {
            "$ref": "#/definitions/ActionDefinition"
          },
          "maxItems": 300
        },
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/Link"
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "statusCode",
        "error",
        "message"
      ],
      "properties": {
        "statusCode": {
          "type": "integer",
          "default": 400
        },
        "error": {
          "type": "string",
          "default": "Bad Request"
        },
        "message": {
          "type": "string",
          "default": "This is not a valid request"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "Custom_Name": {
          "type": "string",
          "example": "Accident"
        },
        "Value": {
          "type": "string",
          "example": "Car accident"
        },
        "Importance_Text": {
          "type": "string",
          "example": "Active"
        },
        "Notes": {
          "type": "string",
          "example": "What happened"
        },
        "Event_Code_Id": {
          "type": "string",
          "example": "MM_CntrLnk_AgePen"
        },
        "Event_Parameters": {
          "type": "object",
          "example": [
            {
              "Value": "1000",
              "Question_Code_Id": "Pension_Ann_Fund"
            }
          ]
        },
        "Party_Ids": {
          "type": "object",
          "example": [
            1,
            2
          ]
        }
      }
    },
    "Goal": {
      "type": "object",
      "properties": {
        "Party_Id": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            1
          ]
        },
        "Phase_Id": {
          "type": "integer",
          "example": 1
        },
        "Goal_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "G1_Cash"
        },
        "Timeframe_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "Later"
        },
        "Status_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "Active"
        },
        "Priority_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "High"
        },
        "Custom_Name": {
          "type": "string",
          "description": "Goal name",
          "example": "I want to buy a car",
          "maxLength": 150
        },
        "Notes": {
          "type": "string",
          "description": "Note of a goal",
          "example": "This is very important to me"
        },
        "Progress_Step": {
          "type": "string",
          "example": 1
        },
        "Progress_Track": {
          "type": "string",
          "example": "On the track"
        },
        "Joint_Goal_Indicator": {
          "type": "string",
          "description": "Is this goal a joint goal?",
          "example": "N"
        },
        "Seen_By_Planner_Indicator": {
          "type": "string",
          "description": "Is this goal a joint goal?",
          "example": "N"
        },
        "Effective_Date": {
          "type": "string",
          "format": "date",
          "example": "2016-11-15"
        },
        "Importance_Text": {
          "type": "string",
          "example": "This goal is very important to me"
        }
      }
    },
    "GoalInstance": {
      "type": "object",
      "properties": {
        "Goal_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "G1_Cash"
        },
        "Timeframe_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "Later"
        },
        "Status_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "Active"
        },
        "Priority_Code_Id": {
          "type": "string",
          "description": "From reference code table",
          "example": "High"
        },
        "Custom_Name": {
          "type": "string",
          "description": "Goal name",
          "example": "I want to buy a car",
          "maxLength": 150
        },
        "Notes": {
          "type": "string",
          "description": "Note of a goal",
          "example": "This is very important to me"
        },
        "Progress_Step": {
          "type": "string",
          "example": 1
        },
        "Progress_Track": {
          "type": "string",
          "example": "On the track"
        },
        "Joint_Goal_Indicator": {
          "type": "string",
          "description": "Is this goal a joint goal?",
          "example": "Y"
        },
        "Effective_Date": {
          "type": "string",
          "format": "date",
          "example": "2016-11-15"
        },
        "Importance_Text": {
          "type": "string",
          "example": "This goal is very important to me"
        }
      }
    },
    "Link": {
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "description": "The \"href\" property is REQUIRED.\nIts value is either a URI https://tools.ietf.org/html/rfc3986 or a URI Template https://tools.ietf.org/html/rfc6570.\nIf the value is a URI Template then the Link Object SHOULD have a\n\"templated\" attribute whose value is true.\n"
        },
        "templated": {
          "type": "boolean",
          "description": "The \"templated\" property is OPTIONAL.\nIts value is boolean and SHOULD be true when the Link Object's \"href\"\nproperty is a URI Template.\nIts value SHOULD be considered false if it is undefined or any other\nvalue than true.\n",
          "default": false
        },
        "type": {
          "type": "string",
          "description": "The \"type\" property is OPTIONAL.\nIts value is a string used as a hint to indicate the media type\nexpected when dereferencing the target resource.\n"
        },
        "deprecation": {
          "type": "string",
          "format": "uri",
          "description": "The \"deprecation\" property is OPTIONAL.\nIts presence indicates that the link is to be deprecated (i.e.\nremoved) at a future date.  Its value is a URL that SHOULD provide\nfurther information about the deprecation.\nA client SHOULD provide some notification (for example, by logging a\nwarning message) whenever it traverses over a link that has this\nproperty.  The notification SHOULD include the deprecation property's\nvalue so that a client maintainer can easily find information about\nthe deprecation.\n"
        },
        "name": {
          "type": "string",
          "description": "The \"name\" property is OPTIONAL.\nIts value MAY be used as a secondary key for selecting Link Objects\nwhich share the same relation type.\n"
        },
        "profile": {
          "type": "string",
          "format": "uri",
          "description": "The \"profile\" property is OPTIONAL.\nIts value is a string which is a URI that hints about the profile (as\ndefined by https://tools.ietf.org/html/draft-wilde-profile-link-04) of the target resource.\n"
        },
        "title": {
          "type": "string",
          "description": "The \"title\" property is OPTIONAL.\nIts value is a string and is intended for labelling the link with a\nhuman-readable identifier (as defined by https://tools.ietf.org/html/rfc5988).\n"
        },
        "hreflang": {
          "type": "string",
          "description": "The \"hreflang\" property is OPTIONAL.\nIts value is a string and is intended for indicating the language of\nthe target resource (as defined by https://tools.ietf.org/html/rfc5988).\n"
        }
      },
      "description": "A Link Object represents a hyperlink from the containing resource to a URI.\nhttps://tools.ietf.org/html/draft-kelly-json-hal-06#section-5\n"
    },
    "Objective": {
      "type": "object",
      "properties": {
        "Custom_Name": {
          "type": "string",
          "example": "My goal"
        },
        "Importance_Text": {
          "type": "string",
          "example": "This is an important goal"
        },
        "Goal_Code_Id": {
          "type": "string",
          "example": "G1_Cash"
        },
        "Objective_Code_Id": {
          "type": "string",
          "example": "C1_Educ_OBJ_Save"
        },
        "Priority_Code_Id": {
          "type": "string",
          "example": "High"
        },
        "Status_Code_Id": {
          "type": "string",
          "example": "Active"
        },
        "Phase_Id": {
          "type": "integer",
          "example": 1
        },
        "Party_Id": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            1
          ]
        },
        "Scenario_Id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Party": {
      "type": "object",
      "properties": {
        "Scv_Indicator": {
          "type": "string",
          "example": "Y"
        },
        "Description": {
          "type": "string",
          "example": "I am a husband"
        }
      }
    },
    "Phase": {
      "type": "object",
      "properties": {
        "Phase_Type_Code_Id": {
          "type": "string",
          "description": "Phase type code",
          "example": "EXPLORE"
        },
        "External_Reference_Id": {
          "type": "string",
          "description": "Indicator where the phase is created from",
          "example": "ADP_01"
        },
        "Phase_Locked_Indicator": {
          "type": "string",
          "example": "N"
        },
        "Joint_Goal_Indicator": {
          "type": "string",
          "description": "Is this goal a joint goal?",
          "example": "N"
        }
      }
    },
    "Projection": {
      "type": "object",
      "properties": {
        "Request_Id": {
          "type": "string",
          "example": ""
        },
        "Type": {
          "type": "string",
          "example": ""
        },
        "Status": {
          "type": "string",
          "example": ""
        },
        "Input_Xml": {
          "type": "string",
          "example": ""
        },
        "Output_Xml": {
          "type": "string",
          "example": ""
        },
        "Length": {
          "type": "integer"
        },
        "Adviser_Id": {
          "type": "string",
          "example": ""
        },
        "Start_Date": {
          "type": "date"
        },
        "Save_Snapshot_Id": {
          "type": "string",
          "example": ""
        },
        "Interval_Type": {
          "type": "string",
          "example": ""
        },
        "Template": {
          "type": "string",
          "example": ""
        },
        "Projection_Detail": {
          "type": "object",
          "example": [
            {
              "Key_Name": "test",
              "Time_Step": 1,
              "Percentile": 1,
              "Value": "1"
            }
          ]
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "Question_Id": {
          "type": "string",
          "example": "OQ_AchievementAge"
        },
        "Objective_Id": {
          "type": "integer",
          "example": 1
        },
        "Scenario_Id": {
          "type": "integer",
          "example": 1
        },
        "Value": {
          "type": "string",
          "example": "Answer"
        }
      }
    },
    "Scenario": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "example": "Starting Position"
        },
        "Type": {
          "type": "string",
          "example": "initial"
        },
        "Is_Final": {
          "type": "string",
          "example": "Y"
        },
        "Scenario_Id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "ValidationError": {
      "description": "Describes the validation error",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the name of the invalid parameter",
          "example": "startDate"
        },
        "value": {
          "type": "string",
          "description": "the invalid value",
          "example": "thisIs Not a Date"
        },
        "message": {
          "type": "string",
          "description": "A message that describes the nature of the validation error",
          "example": "\"thisIs Not a Date\" is not a valid date"
        }
      }
    },
    "ValidationErrorsList": {
      "type": "object",
      "properties": {
        "validationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    }
  },
  "headers": {
    "ETag": {
      "description": "The ETag response-header field provides the value of the entity tag for the requested entity.\nThe entity tag MAY be used for comparison with other entities from the same resource.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19\n",
      "type": "string",
      "pattern": "([wW]/)?\"([^\"]|\\\\\")*\""
    },
    "Cache-Control": {
      "description": "The Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain. The directives specify behavior intended to prevent caches from adversely interfering with the request or response. These directives typically override the default caching algorithms. Cache directives are unidirectional in that the presence of a directive in a request does not imply that the same directive is to be given in the response.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
      "type": "array",
      "items": {
        "collectionFormat": "csv",
        "type": "string"
      }
    },
    "Vary": {
      "description": "The Vary field value indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44\n",
      "type": "array",
      "items": {
        "collectionFormat": "csv",
        "type": "string"
      }
    },
    "Content-Type": {
      "description": "The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\n",
      "type": "string"
    },
    "Date": {
      "description": "The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18\n",
      "type": "string"
    },
    "Retry-After": {
      "description": "The Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37\n",
      "type": "string"
    },
    "WWW-Authenticate": {
      "description": "The WWW-Authenticate response-header field MUST be included in 401 (Unauthorized) response messages. The field value consists of at least one challenge that indicates the authentication scheme(s) and parameters applicable to the Request-URI.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.47\n",
      "type": "string"
    },
    "Location": {
      "description": "The Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource. For 201 (Created) responses, the Location is that of the new resource which was created by the request. For 3xx responses, the location SHOULD indicate the server's preferred URI for automatic redirection to the resource. The field value consists of a single absolute URI.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30\n",
      "type": "string",
      "format": "uri"
    }
  },
  "responses": {
    "Created": {
      "description": "Created",
      "headers": {
        "Location": {
          "x-additional-description": "Set this to the URL of the created resource",
          "$ref": "#/headers/Location"
        },
        "ETag": {
          "x-additional-description": "Set this to the Entity Tag of the create resource",
          "$ref": "#/headers/ETag"
        }
      }
    },
    "NoContent": {
      "description": "Action was performed successfully"
    },
    "NotFound": {
      "description": "The resource requested does not exist"
    },
    "BadRequest": {
      "description": "Bad Request. A list of the validation errors will be included in the body",
      "schema": {
        "$ref": "#/definitions/ValidationErrorsList"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "headers": {
        "WWW-Authenticate": {
          "$ref": "#/headers/WWW-Authenticate"
        }
      }
    },
    "Forbidden": {
      "description": "Forbidden"
    },
    "Conflict": {
      "description": "The request could not be completed due to a conflict with the current state of the resource.\n e.g. your trying to add an objective to a scenario and it allready has the maximum number of objectives.\n",
      "schema": {
        "type": "object",
        "properties": {
          "conflictType": {
            "description": "The type of conflict type that has occured.\n\nIf presenting an error message to a user, clients should map the type to an appropriate error message\nrather than displaying the type\n",
            "type": "string",
            "example": "au.com.amp.advice.error.conflict.too-many-objectives"
          }
        }
      }
    },
    "NotImplemented": {
      "description": "Not Implemented"
    },
    "ServiceUnavailable": {
      "description": "Service Unavailable",
      "headers": {
        "Retry-After": {
          "$ref": "#/headers/Retry-After"
        }
      }
    },
    "GenricObject": {
      "description": "A Generic Response containing a JSON Object",
      "schema": {
        "type": "object"
      }
    },
    "GenricArray": {
      "description": "A Generic Response containing an array of JSON Objects",
      "schema": {
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    },
    "Genric": {
      "description": "A Generic Response"
    }
  },
  "example": {
    "Tag": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    }
  }
}